#!/bin/bash
# Script to change the colors of Elegance Colors Gnome Shell theme
#
# Copyright (C) 2012  Satyajit Sahoo
#
# Contains code for getting color from wallpaper by Matthew Richardson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Set paths and variables
selfdir=`cd $(dirname "${BASH_SOURCE[0]}") && pwd`
selffile="$selfdir/elegance-colors"
configdir="$HOME/.config/elegance-colors"
configfile="$configdir/elegance-colors.ini"
tempdir="/tmp/$(whoami)-elegance-colors"
installdir=`if [[ -d "$selfdir/templates" && -d "$selfdir/presets" ]]; then printf "$selfdir"; else printf "/usr/share/elegance-colors"; fi`
defaultconfig="$installdir/presets/default.ini"
template="$installdir/templates/$(gnome-shell --version | cut -f3 -d\  | cut -f1-2 -d.)"
glibschemas="/usr/share/glib-2.0/schemas"
extensiondir="$HOME/.local/share/gnome-shell/extensions/user-theme@gnome-shell-extensions.gcampax.github.com/schemas"
schemafile="org.gnome.shell.extensions.user-theme.gschema.xml"

show_info() {
echo -e "\033[0;32m[INFO $(date +"%H:%M:%S")]\033[0m $@"
}

show_warn() {
echo -e "\033[0;33m[WARN $(date +"%H:%M:%S")]\033[0m $@"
}

show_err() {
echo -e "\033[0;31m[ERR  $(date +"%H:%M:%S")]\033[0m $@" 1>&2
}

notify_err() {
show_err "$@"
notify-send -h int:transient:1 -i dialog-error "Elegance Colors" "$@"
}

export_theme() {
if [[ -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]]; then
	if [[ -z "$1" ]]; then
		read -p  "Enter a name for the theme: " themename
		themefile="$themename.zip"
		themepath="$HOME"
	else
		themefile="${1##*/}"
		themename="${themefile%*.zip}"
		themepath="${1%/*}"
	fi
	rm -rf "$tempdir/elegance-colors.tmp"
	mkdir -p "$tempdir/elegance-colors.tmp"
	cp -rf "$HOME/.themes/elegance-colors" "$tempdir/elegance-colors.tmp/$themename"
	cd "$tempdir/elegance-colors.tmp"
	echo -e "Name: $themename for $(gnome-shell --version)\nGenerated by: elegance-colors <https://github.com/satya164/elegance-colors>\nLicense: GPL-3.0+" >> "$themename/README"
	zip -FS -qr "$themepath/$themefile" "$themename"
	rm -rf "$tempdir/elegance-colors.tmp"
	if [[ -f "$themepath/$themefile" ]]; then
		show_info "Theme exported to '$themepath/$themefile'"
		exit
	else
		notify_err "Failed to export theme!"
		exit 1
	fi
else
	notify_err "Theme files not found!"
	exit 1
fi
}

get_rgba() {
basecolor="$1"
if [[ "$basecolor" =~ ^rgba ]]; then
	c="${basecolor//[a-z() ]/}"
	red=$(printf ${c//[a-z() ]/} | awk -F, '{print $1}')
	green=$(printf ${c//[a-z() ]/} | awk -F, '{print $2}')
	blue=$(printf ${c//[a-z() ]/} | awk -F, '{print $3}')
	alpha=$(printf ${c//[a-z() ]/} | awk -F, '{print $4}')
elif [[ "$basecolor" =~ ^rgb ]]; then
	c="${basecolor//[a-z() ]/}"
	red=$(printf ${c//[a-z() ]/} | awk -F, '{print $1}')
	green=$(printf ${c//[a-z() ]/} | awk -F, '{print $2}')
	blue=$(printf ${c//[a-z() ]/} | awk -F, '{print $3}')
	alpha="1.0"
elif [[ "$basecolor" =~ ^# && "${#basecolor}" -eq 4 ]]; then
	c="${basecolor//#/}"
	red=$(printf "%d\n" 0x${c:0:1}${c:0:1})
	green=$(printf "%d\n" 0x${c:1:1}${c:1:1})
	blue=$(printf "%d\n" 0x${c:2:2}${c:2:1})
	alpha="1.0"
elif [[ "$basecolor" =~ ^# && "${#basecolor}" -eq 7 ]]; then
	c="${basecolor//#/}"
	red=$(printf "%d\n" 0x${c:0:2})
	green=$(printf "%d\n" 0x${c:2:2})
	blue=$(printf "%d\n" 0x${c:4:2})
	alpha="1.0"
else
	show_err "Invalid color '$basecolor'"
fi
}

get_luma() {
basecolor="$1"
get_rgba "$basecolor"
luma=$(echo "$red * 0.2126 + $green * 0.7152 + $blue * 0.0722" | bc -l)
printf ${luma%.*}
}

shade() {
basecolor="$1"
amount="$2"
get_rgba "$basecolor"
red1=$(( red + amount ))
green1=$(( green + amount ))
blue1=$(( blue + amount ))
[[ "$red1" -le 0 ]] && red1=0
[[ "$green1" -le 0 ]] && green1=0
[[ "$blue1" -le 0 ]] && blue1=0
[[ "$red1" -ge 255 ]] && red1=255
[[ "$green1" -ge 255 ]] && green1=255
[[ "$blue1" -ge 255 ]] && blue1=255
printf "rgba($red1,$green1,$blue1,$alpha)"
}

alpha() {
basecolor="$1"
opacity="$2"
get_rgba "$basecolor"
printf "rgba($red,$green,$blue,$opacity)"
}

tint() {
color1="$1"
color2="$2"
amount="$3"
get_rgba "$color1"
red1=$(( red * 25 ))
green1=$(( green * 25 ))
blue1=$(( blue * 25 ))
opacity="$alpha"
get_rgba "$color2"
red2=$(( red * amount ))
green2=$(( green * amount ))
blue2=$(( blue * amount ))
red3=$(( ( red1 + red2 ) / ( amount + 25 ) ))
green3=$(( ( green1 + green2 ) / ( amount + 25 ) ))
blue3=$(( ( blue1 + blue2 ) / ( amount + 25 ) ))
printf "rgba($red3,$green3,$blue3,$opacity)"
}

get_color() {
if [[ "$mode" = "gtk" ]]; then
	# Get color value from the gtk.css file
	show_info "Getting color from GTK theme $gtkpath"
	if [[ `grep -E -i '@define-color (theme_)?selected_bg_color (#|rgb).*' "$gtkpath"` ]]; then
		highlight=`grep -E -i '@define-color (theme_)?selected_bg_color (#|rgb).*' "$gtkpath" | sed -r -e "s/@define-color (theme_)?selected_bg_color //g" -e "s/;//g"`
	else
		show_err "Failed to derive highlight color from GTK theme, using custom color"
		mode="custom"
		highlight="$1"
	fi
elif [[ "$mode" = "wallpaper" ]]; then
	show_info "Getting color from wallpaper $img"
	# Scale background image to 3x3 and take the color from top-left
	highlight=`convert "$img" -resize 3x3 -filter cubic -fuzz 15% -brightness-contrast 15% -colorspace RGB -format '%[pixel:s]' info:-`
else
	show_info "Using custom highlight color"
	highlight="$1"
fi
}

get_textcolor() {
if [[ "$text" = "auto" ]]; then
	show_info "Determining highlight text color"
	if [[ "$mode" = "gtk" ]]; then
		# Get color value from the gtk.css file
		if [[ `grep -E -i '@define-color (theme_)?selected_fg_color (#|rgb).*' "$gtkpath"` ]]; then
			textcolor=`grep -E -i '@define-color (theme_)?selected_fg_color (#|rgb).*' "$gtkpath" | sed -r -e "s/@define-color (theme_)?selected_fg_color //g" -e "s/;//g"`
		else
			show_err "Failed to derive text color from GTK theme, using custom text color"
			textcolor="$1"
		fi
	else
		if [[ $(get_luma "$highlight") -gt 180 ]]; then
			textcolor="rgba(0,0,0,0.9)"
		else
			textcolor="rgba(255,255,255,0.9)"
		fi
	fi
else
	show_info "Using custom highlight text color"
	textcolor="$1"
fi
}

make_theme() {
# Initialize variables
SAVEIFS="$IFS"
IFS=''
unset vars vals
unset include_code include_dir include_css include_files
# Read configuration
read_config
# General settings
selected_bg1=$(shade "$highlight" "$selgradient")
selected_bg2="$highlight"
font_family=$(printf "$fontname" | sed 's/\ \w*$//')
font_size=$(printf "$fontname" | sed 's/.* //')
vars=(
	"${vars[@]}"
	"@selected_bg1"
	"@selected_bg2"
	"@textcolor"
	"@font_family"
	"@font_size"
	"@roundness"
	"@transition"
	"\/\*dropshadow_$dropshadow"
	"dropshadow_$dropshadow\*\/"
)
vals=(
	"${vals[@]}"
	"$selected_bg1"
	"$selected_bg2"
	"$textcolor"
	"$font_family"
	"$font_size"
	"$roundness"
	"$transition"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Panel
panel_bg1=$(tint "$panel_bg1" "$highlight" "$panel_tint")
panel_bg2=$(tint "$panel_bg2" "$highlight" "$panel_tint")
vars=(
	"${vars[@]}"
	"@panel_bg1"
	"@panel_bg2"
	"@panel_fg"
	"@panel_border"
	"@panel_bwidth"
	"\/\*panelicon_$panel_icon"
	"panelicon_$panel_icon\*\/"
)
vals=(
	"${vals[@]}"
	"$panel_bg1"
	"$panel_bg2"
	"$panel_fg"
	"$panel_border"
	"$panel_bwidth"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Overview
vars=(
	"${vars[@]}"
	"@overview_searchbg1"
	"@overview_searchbg2"
	"@overview_searchfocusbg1"
	"@overview_searchfocusbg2"
	"@overview_searchfg"
	"@overview_searchfocusfg"
	"@overview_searchborder"
	"@overview_searchfocusborder"
)
vals=(
	"${vals[@]}"
	"$overview_searchbg1"
	"$overview_searchbg2"
	"$overview_searchfocusbg1"
	"$overview_searchfocusbg2"
	"$overview_searchfg"
	"$overview_searchfocusfg"
	"$overview_searchborder"
	"$overview_searchfocusborder"
)
# Dash
dash_bg1=$(tint "$dash_bg1" "$highlight" "$dash_tint")
dash_bg2=$(tint "$dash_bg2" "$highlight" "$dash_tint")
vars=(
	"${vars[@]}"
	"@dash_fg"
	"@dash_bg1"
	"@dash_bg2"
	"@dash_border"
	"@dash_bwidth"
)
vals=(
	"${vals[@]}"
	"$dash_fg"
	"$dash_bg1"
	"$dash_bg2"
	"$dash_border"
	"$dash_bwidth"
)
# Menu
menu_bg1=$(tint "$menu_bg1" "$highlight" "$menu_tint")
menu_bg2=$(tint "$menu_bg2" "$highlight" "$menu_tint")
vars=(
	"${vars[@]}"
	"@menu_bg1"
	"@menu_bg2"
	"@menu_fg"
	"@menu_border"
	"@menu_bwidth"
	"\/\*arrow_$menu_arrow"
	"arrow_$menu_arrow\*\/"
)
vals=(
	"${vals[@]}"
	"$menu_bg1"
	"$menu_bg2"
	"$menu_fg"
	"$menu_border"
	"$menu_bwidth"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Dialogs
dialog_bg1=$(tint "$dialog_bg1" "$highlight" "$dialog_tint")
dialog_bg2=$(tint "$dialog_bg2" "$highlight" "$dialog_tint")
vars=(
	"${vars[@]}"
	"@dialog_bg1"
	"@dialog_bg2"
	"@dialog_fg"
	"@dialog_heading"
	"@dialog_border"
	"@dialog_bwidth"
)
vals=(
	"${vals[@]}"
	"$dialog_bg1"
	"$dialog_bg2"
	"$dialog_fg"
	"$dialog_heading"
	"$dialog_border"
	"$dialog_bwidth"
)
# Buttons
vars=(
	"${vars[@]}"
	"@button_bg1"
	"@button_bg2"
	"@button_hoverbg1"
	"@button_hoverbg2"
	"@button_activebg1"
	"@button_activebg2"
	"@button_fg"
	"@button_hoverfg"
	"@button_activefg"
	"@button_border"
	"@button_hoverborder"
	"@button_activeborder"
	"\/\*buttonbold_$button_bold"
	"buttonbold_$button_bold\*\/"
)
vals=(
	"${vals[@]}"
	"$button_bg1"
	"$button_bg2"
	"$button_hoverbg1"
	"$button_hoverbg2"
	"$button_activebg1"
	"$button_activebg2"
	"$button_fg"
	"$button_hoverfg"
	"$button_activefg"
	"$button_border"
	"$button_hoverborder"
	"$button_activeborder"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Focused buttons
vars=(
	"${vars[@]}"
	"@buttonfocus_bg1"
	"@buttonfocus_bg2"
	"@buttonfocus_hoverbg1"
	"@buttonfocus_hoverbg2"
	"@buttonfocus_activebg1"
	"@buttonfocus_activebg2"
	"@buttonfocus_fg"
	"@buttonfocus_hoverfg"
	"@buttonfocus_activefg"
	"@buttonfocus_border"
	"@buttonfocus_hoverborder"
	"@buttonfocus_activeborder"
)
vals=(
	"${vals[@]}"
	"$buttonfocus_bg1"
	"$buttonfocus_bg2"
	"$buttonfocus_hoverbg1"
	"$buttonfocus_hoverbg2"
	"$buttonfocus_activebg1"
	"$buttonfocus_activebg2"
	"$buttonfocus_fg"
	"$buttonfocus_hoverfg"
	"$buttonfocus_activefg"
	"$buttonfocus_border"
	"$buttonfocus_hoverborder"
	"$buttonfocus_activeborder"
)
# Entry
vars=(
	"${vars[@]}"
	"@entry_bg1"
	"@entry_bg2"
	"@entry_fg"
	"@entry_border"
	"\/\*entryshadow_$entry_shadow"
	"entryshadow_$entry_shadow\*\/"
)
vals=(
	"${vals[@]}"
	"$entry_bg1"
	"$entry_bg2"
	"$entry_fg"
	"$entry_border"
	"\/\*\*\/"
	"\/\*\*\/"
)
# Misc
vars=(
	"${vars[@]}"
	"@misc_separator1"
	"@misc_separator2"
	"@misc_runningbg1"
	"@misc_runningbg2"
	"@misc_tooltipbg1"
	"@misc_tooltipbg2"
	"@misc_tooltipfg"
	"@misc_tooltipborder"
	"@misc_insensitive"
)
vals=(
	"${vals[@]}"
	"$misc_separator1"
	"$misc_separator2"
	"$misc_runningbg1"
	"$misc_runningbg2"
	"$misc_tooltipbg1"
	"$misc_tooltipbg2"
	"$misc_tooltipfg"
	"$misc_tooltipborder"
	"$misc_insensitive"
)
# Set a temporary directory
makedir="$tempdir/elegance-colors-$(date +%H%M%S%N)/gnome-shell"
# Copy Elegance Colors to create a new theme
if [[ -d "$template" ]]; then
	mkdir -p "$makedir"
	show_info "Using template '$template'"
	cp -rf "$template/." "$makedir"
else
	show_err "Failed to copy files"
fi
# Include additional CSS code in the template
if [[ ! -z "$include_code" ]]; then
	show_info "Including code $include_code in theme"
	echo "$include_code" >> "$makedir/gnome-shell.css"
fi
# Include additional files
if [[ ! -z "$include_dir" ]]; then
	IFS='; ' read -a css_files <<< "$include_css"
	for css_file in "${css_files[@]}"; do
		show_info "Including CSS file $css_file in theme"
		if [[ -f "$configdir/presets/$include_dir/$css_file" ]]; then
			cat "$configdir/presets/$include_dir/$css_file" >> "$makedir/gnome-shell.css"
		elif [[ -f "$installdir/presets/$include_dir/$css_file" ]]; then
			cat "$installdir/presets/$include_dir/$css_file" >> "$makedir/gnome-shell.css"
		else
			show_err "CSS file $css_file not found"
		fi
	done
	IFS='; ' read -a asset_files <<< "$include_files"
	for asset_file in "${asset_files[@]}"; do
		show_info "Copying file $asset_file to theme directory"
		if [[ -f "$configdir/presets/$include_dir/$asset_file" ]]; then
			cp -f "$configdir/presets/$include_dir/$asset_file" "$makedir/"
		elif [[ -f "$installdir/presets/$include_dir/$asset_file" ]]; then
			cp -f "$installdir/presets/$include_dir/$asset_file" "$makedir/"
		else
			show_err "File $asset_file not found"
		fi
	done
fi
# Replace variables in the template
show_info "Making the theme"
for (( i=0; i < ${#vars[@]}; i++ ))
do
	if [[ ! `grep "${vars[i]}" "$makedir/gnome-shell.css"` ]]; then
		show_warn "Template does not have any ${vars[i]} variable"
	elif [[ "${vals[i]}" = "" ]]; then
		show_warn "The value of ${vars[i]} variable is not set"
	else
		show_info "Replacing ${vars[i]} with ${vals[i]}"
		sed -i "s/${vars[i]}/${vals[i]}/g" "$makedir/gnome-shell.css"
	fi
done
# Copy the newly created theme
if [[ ! -f "$makedir/gnome-shell.css" ]]; then
	show_err "Failed to make the theme, files were lost"
elif [[ `grep "@" "$makedir/gnome-shell.css"` ]]; then
	show_err "Failed to make the theme, could not replace variables"
	grep "@" "$makedir/gnome-shell.css" | sort -u
elif [[ `grep ",," "$makedir/gnome-shell.css"` ]]; then
	show_err "Failed to make the theme, invalid color expression"
	grep ",," "$makedir/gnome-shell.css" | sort -u
else
	rm -rf "$HOME/.themes/elegance-colors"
	mkdir -p "$HOME/.themes/elegance-colors"
	mv "$makedir" "$HOME/.themes/elegance-colors/"
	# Set the theme
	if [[ `gsettings --schemadir "$schemadir" get org.gnome.shell.extensions.user-theme name | grep -iw "elegance-colors"` ]]; then
		show_info "Reloading the theme"
		gsettings --schemadir "$schemadir" set org.gnome.shell.extensions.user-theme name 'elegance-colors'
	fi
fi
# Remove the temporary directory
rm -rf $(dirname "$makedir")
# Restore previous IFS
IFS="$SAVEIFS"
}

monitor_changes() {
# Check if config has been changed
md5conf="$tempdir/conf-md5"
md5c=`md5sum "$configfile"`
if [[ -f "$md5conf" ]]; then
	oldmd5c=`cat "$md5conf"`
	if [[ ! "$oldmd5c" = "$md5c" ]]; then
		show_info "Configuration change detected"
		make_theme
	fi
fi
echo "$md5c" > "$md5conf"
# Check if the gtk theme has been changed
if [[ "$mode" = "gtk" ]]; then
	md5gtk="$tempdir/gtk-md5"
	md5g=`md5sum "$gtkpath"`
	if [[ -f "$md5gtk" ]]; then
		oldmd5g=`cat "$md5gtk"`
		if [[ ! "$oldmd5g" = "$md5g" ]]; then
			show_info "GTK theme change detected"
			make_theme
		fi
	fi
	echo "$md5g" > "$md5gtk"
# Check if the wallpaper has been changed
elif [[ "$mode" = "wallpaper" ]]; then
	md5bg="$tempdir/background-md5"
	md5b=`md5sum "$img"`
	if [[ -f "$md5bg" ]]; then
		oldmd5b=`cat "$md5bg"`
		if [[ ! "$oldmd5b" = "$md5b" ]]; then
			show_info "Wallpaper change detected"
			make_theme
		fi
	fi
	echo "$md5b" > "$md5bg"
fi
}

read_config() {
while IFS='= ' read var val; do
	# Escape comments, section headers and empty values
	[[ "$var" =~ ^# || "$var" =~ ^\[ || ! "$val" ]] && continue
	# Workaround for locales which use "," instead of "."
	[[ "$val" =~ ^[0-9]+.[0-9]+$ ]] && val="${val//,/.}"
	# Detect highlight color
	[[ "$var" = "highlight" ]] && get_color "$val" && val="$highlight"
	# Detect highlight text color
	[[ "$var" = "textcolor" ]] && get_textcolor "$val" && val="$textcolor"
	# Symbolic values
	val="${val//@mode/@highlight}"
	val="${val//@text/@textcolor}"
	[[ "$val" =~ ^@ ]] && val="${val//@/}" && val="${!val}"
	delim=$(printf "$val" | awk -F';' '{ print NF }')
	for ((i=1; i < $delim; i++)); do
		val1=$(printf "$val" | cut -f"$i" -d";")
		[[ "$val1" =~ ^@ ]] && val1="${val1//@/}" && val=$(printf "$val" | sed "s/@${val1}/${!val1}/g")
	done
	# Color operations
	[[ "$val" =~ ^alpha\; ]] && val1=$(printf "$val" | cut -f2 -d";") && val2=$(printf "$val" | cut -f3 -d";") && val=$(alpha "$val1" "$val2")
	[[ "$val" =~ ^shade\; ]] && val1=$(printf "$val" | cut -f2 -d";") && val2=$(printf "$val" | cut -f3 -d";") && val=$(shade "$val1" "$val2")
	[[ "$val" =~ ^tint\; ]] && val1=$(printf "$val" | cut -f2 -d";") && val2=$(printf "$val" | cut -f3 -d";") && val3=$(printf "$val" | cut -f4 -d";") && val=$(tint "$val1" "$val2" "$val3")
	# Define variables
	eval "$var"="\$val"
done < "$configfile"
}

update_config() {
# Update the config file
show_info "Updating the config file"
while IFS='= ' read var val; do
	# Escape comments
	[[ "$var" =~ ^# ]] && continue
	# Read the section header
	[[ "$var" =~ ^\[.*\]$ ]] && section="$var" && sectionsafe="${section//\[/\\[}"
	# Write the non-existent value into the config file
	[[ `grep "$sectionsafe" "$configfile"` ]] || echo -e "\n$section" >> "$configfile"
	[[ `grep "$var" "$configfile"` ]] || sed -i "s/$sectionsafe/$sectionsafe\n$var=$val/g" "$configfile"
done < "$defaultconfig"
}

set_schemadir() {
# Set the schemadir
if [[ -f "$extensiondir/$schemafile" && -f "$extensiondir/gschemas.compiled" ]]; then
	schemadir="$extensiondir"
elif [[ -f "$glibschemas/$schemafile" && -f "$glibschemas/gschemas.compiled" ]]; then
	schemadir="$glibschemas"
else
	return 1
fi
}

initialize() {
# Verify if User themes extension is installed and set schemadir
set_schemadir
if [[ ! $? -eq 0 ]]; then
	notify_err "User themes extension is not installed, please install from https://extensions.gnome.org/extension/19/user-themes/"
	# Wait till the User theme extension is installed
	until set_schemadir; do
		sleep 5
	done
fi
# If config directory doesn't exist, create it
[[ -d "$configdir" ]] || mkdir -p "$configdir"
# If config file doesn't exist, copy the default config
[[ -f "$configfile" ]] || cp -f "$defaultconfig" "$configfile"
# Get the mode
mode=$(grep "mode=" $configfile | cut -d '=' -f 2)
if [[ "$mode" = "gtk" ]]; then
	# Get the gtk theme name
	theme=$(gsettings get org.gnome.desktop.interface gtk-theme | sed -e "s/'//g")
	# Get the gtk theme path
	gtkpaths=( "$HOME/.themes/$theme/gtk-3.0/gtk-main.css" "$HOME/.themes/$theme/gtk-3.0/gtk.css" "/usr/share/themes/$theme/gtk-3.0/gtk-main.css" "/usr/share/themes/$theme/gtk-3.0/gtk.css" )
	# Get the gtk theme path
	for gtkpath in "${gtkpaths[@]}"; do
		[[ -f "$gtkpath" ]] && break
	done
elif [[ "$mode" = "wallpaper" ]]; then
	# Get the background image path
	img=$(gsettings get org.gnome.desktop.background picture-uri | sed -e "s/'//g" -e "s/file:\/\///g" -e 's/\%20/\ /g')
	# See if the returned image is a xml file
	[[ "$img" =~ .xml$ ]] && img=$(grep "<file>" "$img" | grep ".jpg\|.png" | sed -e 's/<file>//' -e 's/<\/file>//' | head -n 1)
fi
# If elegance-colors doesn't exist in ~./themes, create it
[[ -f "$HOME/.themes/elegance-colors/gnome-shell/gnome-shell.css" ]] || make_theme
}

stop_process() {
if [[ -f "$tempdir/elegance-colors.pid" ]]; then
	pid=$(cat "$tempdir/elegance-colors.pid")
	rm -f "$tempdir/elegance-colors.pid"
	if [[ `grep -s elegance-colors "/proc/$pid/cmdline"` ]]; then
		kill -9 "$pid"
		show_info "Killed process $pid"
	else
		show_warn "$pid does not seem to be elegance-colors"
	fi
else
	show_warn "No running process found"
fi
}

start_process() {
show_info "Starting process"
# Create the temporary directory
mkdir -p "$tempdir"
# Delete old md5
md5self="$tempdir/self-md5"
rm -f "$md5self"
# Stop any previous instances first
[[ -f "$tempdir/elegance-colors.pid" ]] && stop_process
# Write the pid to a file
echo "$$" > "$tempdir/elegance-colors.pid"
# Update config file, we do it once to avoid high cpu usage
[[ -f "$configfile" ]] && update_config
while :
do
	# Check if the script has been changed
	md5s=`md5sum "$selffile"`
	if [[ -f "$md5self" ]]; then
		oldmd5s=`cat "$md5self"`
		if [[ ! "$oldmd5s" = "$md5s" ]]; then
			show_info "Script has been changed, restarting"
			$0 "$@" &
			exit 0
		fi
	fi
	echo "$md5s" > "$md5self"
	# No need to run in background if Gnome Shell is not running
	if ( [ ! "$(pidof gnome-shell)" ] ); then
		show_err "Gnome Shell not running"
		exit 1
	fi
	initialize
	# Check if the current theme name matches elegance-colors
	[[ `gsettings --schemadir "$schemadir" get org.gnome.shell.extensions.user-theme name | grep -iw "elegance-colors"` ]] && monitor_changes
	sleep 3
done
}

apply_changes() {
initialize
make_theme
}

case "$1" in
	"start")
		start_process;;
	"stop")
		stop_process;;
	"apply")
		apply_changes;;
	"update")
		update_config;;
	"export")
		export_theme "$2";;
	"help")
		man elegance-colors;;
	*)
		exec "$0" start > /dev/null 2>&1 &
		disown;;
esac
